
There are two general strategies to traverse a tree:

Breadth First Search (BFS)

We scan through the tree level by level, following the order of height, from top to bottom. 
The nodes on higher level would be visited before the ones with lower levels.

Depth First Search (DFS)

In this strategy, we adopt the depth as the priority, so that one would start from a root and reach all
the way down to certain leaf, and then back to root to reach another branch.

The DFS strategy can further be distinguished as preorder, inorder, and postorder depending on the relative
order among the root node, left node and right node.


#general graph node

class Node:

    def __init__(self,val):
        self.val=val
        self.children=[]
        
    def DFS(self,node,visited):
        if node in visited:
            return
        visited[node]=True
        for c in node.children:
            DFS(c,visited)
            
   def BFS(self,node,visited):
        print(node.val)
        visited[node]=True
        q=node.children
        while q:
          c=q.pop(0)
          if c in visited:
              continue
          visited[c]=True
          print(c.val)
          q+=c.children
          
 #using defaultdict
 
 from collections import defaultdict
 class Graph:
    def__init__(self):
        self.graph=defaultdict(list)
    def addEdge(self,u,v):
       self.graph[u].append(v)
    def DFSUtil(self,v,visited):
       print(v)
       visited[v]=True
       for i in self.graph:
          if visited[i] == False:
             self.DFSUtit(i,visited)
    def DFS(self,v):
       visited=[False]*len(self.graph)
       self.DFSUtil(self,v,visited)
       
  class Graph:
      def__init__(self):
          self.graph= defaultdict(list)
      def addEdge(self,u,v):
          self.graph[u].append(v)
      def BFS(self,v):
          visited=[False]*len(self.graph)
          queue=[]
          queue.append(v)
          visited[v]= True
          while queue:
              s=q.pop(0)
              print(s)
              for i in self.graph[s]:
                  if visited[i]== False:
                      queue.append(i)
                      visited[i]=True


Tree Traversal:

Inorder: root,left,right
Preorder: left,root,right
PostOrder: left,right,root

 *For a binary search tree, we can retrieve all the data in sorted order using in-order traversal.
 
 def pre_order(self,root):
    if root:
        print(root.val)
        self.pre_order(root.left)
        self.pre_order(root.right)

  def In_order(self,root):
    if root:
        self.In_order(root.left)
        print(root.val)
        self.In_order(root.right)

  def Post_order(self,root):
    if root:
        self.Post_order(root.left)
        self.Post_order(root.right)
        print(root.val)
