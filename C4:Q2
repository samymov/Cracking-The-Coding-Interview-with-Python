"""
Chapter 04 - Problem 02 - Minimal Tree
Problem Statement:
Given a sorted (increasing order) array
with unique integer elements, write an algorithm
to create a binary search tree with minimal height.
Solution:
To create a minimal height BST, the input array must be traversed
according to the binary search algorithm. At each recursion of the
algorithm, we add the current array element's value to a BST node,
then divide the input array as closely to 50%/50% as possible before
recursing on each half for the left and right BST child nodes.
Time complexity: O(log(N))
Space complexity: O(log(N))
"""

Class Node:
def __init__(self,left, right, val):
    self.val= val
    self.right= right
    self.left= left
    
def mk_bst(self,arr):
    if len(arr)<1: 
        return None
    mid=len(arr)-1//2
    node = Node( mk_bst(arr[0:mid])), mk_bst(arr[mid+1:len(arr)-1]),arr[mid])
    return node
        
    
